{
  "name": "Telegram Video Filter & Return",
  "nodes": [
    {
      "id": "1",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [250, 250],
      "parameters": {
        "updates": ["message"]
      },
      "credentials": {
        "telegramApi": {
          "id": "replace-with-your-telegram-credentials-id",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "id": "2",
      "name": "Extract URL",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [500, 250],
      "parameters": {
        "fields": {
          "video_url": "={{$json[\"message\"][\"text\"]}}"
        }
      }
    },
    {
      "id": "3",
      "name": "Download Video",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [750, 250],
      "parameters": {
        "command": "yt-dlp",
        "arguments": "{{$json[\"video_url\"]}} -o /tmp/input.mp4"
      }
    },
    {
      "id": "4",
      "name": "Check for Music",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1000, 200],
      "parameters": {
        "command": "ffprobe",
        "arguments": "-i /tmp/input.mp4 -show_streams -select_streams a -loglevel error"
      }
    },
    {
      "id": "5",
      "name": "Parse Music Result",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1250, 200],
      "parameters": {
        "functionCode": "const output = $json[\"stdout\"] || \"\";\nif (output.includes(\"codec_type=audio\")) {\n  return [{ contains_music: true }];\n}\nreturn [{ contains_music: false }];"
      }
    },
    {
      "id": "6",
      "name": "Face/Gender Filter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1000, 300],
      "parameters": {
        "url": "http://deepstack:5000/v1/vision/face/recognize",
        "method": "POST",
        "sendBinaryData": true,
        "binaryPropertyName": "data"
      }
    },
    {
      "id": "7",
      "name": "Parse Face Result",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1250, 300],
      "parameters": {
        "functionCode": "const faces = $json[\"predictions\"] || [];\nlet contains_woman = false;\nfor (const face of faces) {\n  if ((face.gender || \"\").toLowerCase() === \"female\") {\n    contains_woman = true;\n    break;\n  }\n}\nreturn [{ contains_woman }];"
      }
    },
    {
      "id": "8",
      "name": "Merge Filters",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [1500, 250],
      "parameters": {
        "mode": "mergeByIndex"
      }
    },
    {
      "id": "9",
      "name": "Decision Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1750, 250],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"contains_music\"]}}",
              "operation": "isFalse"
            },
            {
              "value1": "={{$json[\"contains_woman\"]}}",
              "operation": "isFalse"
            }
          ]
        }
      }
    },
    {
      "id": "10",
      "name": "Send Clean Video",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [2000, 200],
      "parameters": {
        "chatId": "YOUR_CHAT_ID",
        "message": "Here is your filtered video:",
        "additionalFields": {
          "video": "file:///tmp/input.mp4"
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "replace-with-your-telegram-credentials-id",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "id": "11",
      "name": "Send Reject",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [2000, 300],
      "parameters": {
        "chatId": "YOUR_CHAT_ID",
        "message": "Video rejected (contains music or women)"
      },
      "credentials": {
        "telegramApi": {
          "id": "replace-with-your-telegram-credentials-id",
          "name": "Telegram Bot"
        }
      }
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [[{ "node": "Extract URL", "type": "main", "index": 0 }]]
    },
    "Extract URL": {
      "main": [[{ "node": "Download Video", "type": "main", "index": 0 }]]
    },
    "Download Video": {
      "main": [
        { "node": "Check for Music", "type": "main", "index": 0 },
        { "node": "Face/Gender Filter", "type": "main", "index": 0 }
      ]
    },
    "Check for Music": {
      "main": [[{ "node": "Parse Music Result", "type": "main", "index": 0 }]]
    },
    "Parse Music Result": {
      "main": [[{ "node": "Merge Filters", "type": "main", "index": 0 }]]
    },
    "Face/Gender Filter": {
      "main": [[{ "node": "Parse Face Result", "type": "main", "index": 0 }]]
    },
    "Parse Face Result": {
      "main": [[{ "node": "Merge Filters", "type": "main", "index": 0 }]]
    },
    "Merge Filters": {
      "main": [[{ "node": "Decision Filter", "type": "main", "index": 0 }]]
    },
    "Decision Filter": {
      "main": [
        [{ "node": "Send Clean Video", "type": "main", "index": 0 }],
        [{ "node": "Send Reject", "type": "main", "index": 0 }]
      ]
    }
  }
}
